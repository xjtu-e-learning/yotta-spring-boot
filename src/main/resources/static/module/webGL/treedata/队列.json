{"totalbranchlevel":2,"branchnum":2,"term_id":73,"name":"队列","children":[{"totalbranchlevel":0,"facet_name":"摘要","totalbranchnum":0,"type":"branch","totalleafnum":3,"children":[{"url":"https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97","content":"本文介绍的是程式设计上的意义。关于队列军事上的意义，详见“军事组织”。","fragment_id":"摘要_1","scratchTime":"2016-12-20 09:49:41.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97","content":"队列，又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。","fragment_id":"摘要_2","scratchTime":"2016-12-20 09:49:41.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97","content":"队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。","fragment_id":"摘要_3","scratchTime":"2016-12-20 09:49:41.0","type":"leaf","flag":"text"}]},{"totalbranchlevel":0,"facet_name":"阵列队列","totalbranchnum":0,"type":"branch","totalleafnum":1,"children":[{"url":"https://zh.wikipedia.org/wiki/%E9%98%9F%E5%88%97","content":"#include<stdio.h>\n#include<stdlib.h>\n/*伫列资料结构*/\nstruct Queue\n{\n  int Array[10];//阵列空间大小\n  int head;//前端(front)\n  int tail;//后端(rear)\n  int length;//伫列长度 //将其视为当前资料大小，并且使用这个成员判断满或空    \n};\n/*资料加入伫列*/\nvoid EnQueue(struct Queue *Queue1,int x)\n{\n  Queue1->Array[Queue1->tail]=x;\n  if(Queue1->tail+1==10)//Queue1->length改为空间大小10\n  {\n    Queue1->tail=0;//1改为0                 \n  }\n  else\n  {\n    Queue1->tail=Queue1->tail+1;\n    //Queue1->length=Queue1->length+1;//这行逻辑上有问题   //Modify By pcjackal.tw //这行放于外面\n  }\n  Queue1->length=Queue1->length+1;//当前个数增1\n}\n/*资料移出伫列*/\nint DeQueue(struct Queue *Queue1)\n{\n  int x=Queue1->Array[Queue1->head];\n  if(Queue1->head+1==10)//空间大小10\n  {\n    Queue1->head=0;                               \n  }\n  else\n  {\n    Queue1->head=Queue1->head+1;    \n  }\n  Queue1->length=Queue1->length-1;//移出后减少1\n  return x;\n}\n/*伫列操作*/\nint main()\n{\n  struct Queue *Queue1=malloc(sizeof(struct Queue));//建立资料结构\n  Queue1->length=0;//新增长度//10改为0，初始状态\n  Queue1->head=0;//必须要先初始化\n  Queue1->tail=0;//必须要先初始化\n  EnQueue(Queue1,5);//将5放入伫列\n  EnQueue(Queue1,8);//将8放入伫列\n  EnQueue(Queue1,3);//将3放入伫列\n  EnQueue(Queue1,2);//将2放入伫列\n  printf(\"%d \",DeQueue(Queue1));//输出伫列(5)  \n  printf(\"%d \",DeQueue(Queue1));//输出伫列(8)\n  printf(\"%d \",DeQueue(Queue1));//输出伫列(3) \n  system(\"pause\");   \n}","fragment_id":"阵列队列_1","scratchTime":"2016-12-20 09:49:41.0","type":"leaf","flag":"text"}]}]}
