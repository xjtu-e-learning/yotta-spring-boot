{"totalbranchlevel":2,"branchnum":6,"term_id":44,"name":"数组","children":[{"totalbranchlevel":0,"facet_name":"摘要","totalbranchnum":0,"type":"branch","totalleafnum":5,"children":[{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"在编程语言中，数组数据结构（英语：array data structure），简称数组（英语：Array），是一种数据结构，是数据元素（elements）的集合。它十分类似数学上的“矩阵”，但是在电脑编程语言上，表示方法和意义上略有不同。","fragment_id":"摘要_1","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"数学上的矩阵看起来像这样： a = [ 3 6 2 0 1 − 4 2 − 1 0 ] {\\displaystyle a={\\begin{bmatrix}3&6&2\\\\0&1&-4\\\\2&-1&0\\end{bmatrix}}}","fragment_id":"摘要_2","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"而电脑上的数组看起来像这样，例如C语言中的数组：","fragment_id":"摘要_3","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"int a[3][3]={ \n                    { 3,  6,  2 },\n                    { 0,  1, -4 },\n                    { 2, -1,  0 }\n                 };","fragment_id":"摘要_4","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"虽然数组在各种电脑编程语言中的表示式略有不同，但是几乎每一种编程语言都有这种结构和观念，它已经不只是一种编程专用的术语，而是电脑运作中非常重要的技术和概念。当前电脑能够显示、打印中文字，都是数组的观念应用；字符串也是基于数组的一种重要数据结构。数据库也是数组概念的一种扩充和延伸。","fragment_id":"摘要_5","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"}]},{"totalbranchlevel":1,"facet_name":"语义","totalbranchnum":1,"type":"branch","totalleafnum":1,"children":[{"totalbranchlevel":0,"facet_name":"C/C++标准中的数组","totalbranchnum":0,"type":"branch","totalleafnum":3,"children":[{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"C语言标准中定义，数组下标运算（Array subscripting）有两个运算数，一个为到类型type的指针表达式，另一个运算符为整数表达式，结果为类型type。但没有规定两个运算数的先后次序[注 5]。因此，有以下推论：","fragment_id":"数组下标运算符_1","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"两个运算数可以交换顺序，即 p[N] 与 N[p] 是等价的，为 *(p+N) ； 数组下标运算，既可以适用于数组名（实际上隐式把数组名转换为指向数组首元素的指针表达式），也可以适用于指针表达式； 整型表达式可以取负值。","fragment_id":"数组下标运算符_2","scratchTime":"2016-12-20 09:44:53.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"int a[10], *p = a;\np[0] = 10;\n( p + 1 )[0] = 20;\n0[p + 1] = 10;","fragment_id":"数组下标运算符_3","scratchTime":"2016-12-20 09:44:53.0","type":"leaf","flag":"text"}]}]},{"totalbranchlevel":0,"facet_name":"多维数组","totalbranchnum":0,"type":"branch","totalleafnum":3,"children":[{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"普通数组采用一个整数来作下标。多维数组的概念特别是在数值计算和图形应用方面非常有用。我们在多维数组之中采用一系列有序的整数来标注，如在[ 3,1,5 ] 。这种整数列表之中整数的个数始终相同，且被称为数组的“维度”。关于每个数组维度的边界称为“维”。维度为k的数组通常被称为k维。","fragment_id":"多维数组_1","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"多维数组的数组名字，在表达式中自动转换为数组首元素地址值，但这个首元素实际上是去除数组下标第一维之后的数组剩余部分。例如：","fragment_id":"多维数组_2","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"int a[10][15];\n int (*p)[15]=a;  // a在表达式中自动转换为指向具有15个int的数组的指针值。","fragment_id":"多维数组_3","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"}]},{"totalbranchlevel":1,"facet_name":"不完整的数组类型","totalbranchnum":1,"type":"branch","totalleafnum":1,"children":[{"totalbranchlevel":0,"facet_name":"柔性数组成员","totalbranchnum":0,"type":"branch","totalleafnum":2,"children":[{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"C99规定，struct的最后一个成员可以是不完整的数组类型。例如：","fragment_id":"柔性数组成员_1","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"struct test\n{\n      int a;\n      double b;\n      char c[];\n};","fragment_id":"柔性数组成员_2","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"}]}]},{"totalbranchlevel":0,"facet_name":"可变长数组","totalbranchnum":0,"type":"branch","totalleafnum":2,"children":[{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"C99引入了可变长数组（variable length array，简称VLA），只能定义在块作用域或函数原型作用域，必须无链接性。其数组长度在编译期可变，但在运行期该数组对象一旦生成就不可改变数组长度了。例如：","fragment_id":"可变长数组_1","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"void foo(int m，int n)\n{\n    int v[m][n]; \n    int *p[n];\n}","fragment_id":"可变长数组_2","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"}]},{"totalbranchlevel":0,"facet_name":"程序设计","totalbranchnum":0,"type":"branch","totalleafnum":6,"children":[{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"数组设计之初是在形式上依赖内存分配而成的，所以必须在使用前预先请求空间。这使得数组有以下特性：","fragment_id":"程序设计_1","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"请求空间以后大小固定，不能再改变（数据溢出问题）； 在内存中有空间连续性的表现，中间不会存在其他程序需要调用的数据，为此数组的专用内存空间； 在旧式编程语言中（如有中阶语言之称的C），程序不会对数组的操作做下界判断，也就有潜在的越界操作的风险（比如会把数据写在运行中程序需要调用的核心部分的内存上）。","fragment_id":"程序设计_2","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"因为简单数组强烈倚赖电脑硬件之内存，所以不适用于现代的程序设计。欲使用可变大小、硬件无关性的数据类型，Java等程序设计语言均提供了更高级的数据结构：ArrayList、Vector等动态数组。","fragment_id":"程序设计_3","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"^ C99语言标准6.2.5节中规定：An array type describes a contiguously allocated nonempty set of objects with a particular member object type, called the element type. Array types are characterized by their element type and by the number of elements in the array. An array type is said to be derived from its element type, and if its element type is T, the array type is sometimes called “array of T”. The construction of an array type from an element type is called “array type derivation”. ^ C99标准中的第“6.3.2.1 Lvalues, arrays, and function designators”小节中规定：Except when it is the operand of the sizeof operator or the unary & operator, or is a string literal used to initialize an array, an expression that has type “array of type” is converted to an expression with type “pointer to type” that points to the initial element of the array object and is not an lvalue. If the array object has register storage class, the behavior is undefined. ^ 只能对具有左值的数组名执行取地址的&操作。对右值数组，例如函数调用结果是一个数组类型时，对该数组取地址&则会编译报错：taking address of temporary ^ C++98标准中规定：An lvalue or rvalue of type “array of N T” or “array of unknown bound of T” can be converted to an rvalue of type “pointer to T.” The result is a pointer to the first element of the array. ^ C99语言标准“6.5.2.1 Array subscripting”中有：Constraints One of the expressions shall have type ‘‘pointer to object type’’, the other expression shall have integer type, and the result has type ‘‘type’’.","fragment_id":"程序设计_4","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"NIST's Dictionary of Algorithms and Data Structures: Array","fragment_id":"程序设计_5","scratchTime":"2016-12-20 09:44:52.0","type":"leaf","flag":"text"},{"url":"https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84","content":"//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/32px-Internet_map_1024.jpg","fragment_id":"程序设计_1","scratchTime":"2016-12-20 09:44:53.0","type":"leaf","flag":"image"}]}]}
